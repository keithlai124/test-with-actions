name: Python Coverage

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write

jobs:
  python-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage==7.9
          pip freeze
      
      - name: Run tests to generate coverage details
        run: |
          coverage run -m unittest discover -s tests -p "*_test.py"
      
      - name: Create reports in multiple formats
        id: coverage-results
        run: |
          # Output full textual coverage report
          echo "text_report<<EOF" >> $GITHUB_OUTPUT
          coverage report >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Generate XML and HTML reports
          coverage xml
          coverage html

      - name: Parse XML report to get overall percentage
        id: coverage-summary
        # continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the XML file
            const xmlData = fs.readFileSync('coverage.xml', 'utf8');

            // Extract line-rate using regex (simpler than XML parsing)
            const lineRateMatch = xmlData.match(/line-rate="([0-9.]+)"/);
            
            if (!lineRateMatch) {
              throw new Error('Could not find line-rate in coverage.xml');
            }

            // Save line-rate value to an output variable
            const lineRate = lineRateMatch[1];
            core.setOutput('line_rate', lineRate);

      - name: Attach coverage reports to workflow run
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

      - name: Post coverage comment
        uses: actions/github-script@v7
        with:
          script: |
            // The workflow run URL, where the reports are attached
            const workflowRunUrl = `https://github.com/${process.env.REPO_NAME}/actions/runs/${process.env.RUN_ID}`;
            
            // Calculate coverage percentage and determine pass/fail
            const minimumCoverage = parseFloat(process.env.MINIMUM_COVERAGE).toFixed(2);
            const coveragePercentage = parseFloat(process.env.COVERAGE_REPORT_LINE_RATE).toFixed(2);
            const isPassingCoverage = coveragePercentage >= minimumCoverage;
            const statusIcon = isPassingCoverage ? '‚úÖ' : '‚ùå';
            const statusText = isPassingCoverage ? 'PASS' : 'FAIL';

            // Create the comment
            const commentBody = `
            ### ${statusIcon} Test Coverage Report
            **Coverage Overall**: \`${coveragePercentage * 100}%\`
            **Coverage Required**: \`${minimumCoverage * 100}%\`

            <details>
            <summary>üìã Detailed Coverage Report</summary>
            <br>
            
            \`\`\`
            ${process.env.COVERAGE_REPORT_TEXT}
            \`\`\`
            
            </details>
            
            ---
            
            ### üîó Links
            - [üìä View Run Details](${workflowRunUrl})
            - [üìÅ Download Coverage Artifacts (XML, HTML)](${workflowRunUrl}#artifacts)
            
            ---
            <sub>ü§ñ This comment was automatically generated by the Python Coverage workflow</sub>
            `;

            github.rest.issues.createComment({
              owner: process.env.REPO_NAME.split('/')[0],
              repo: process.env.REPO_NAME.split('/')[1],
              issue_number: Number(process.env.ISSUE_NUMBER),
              body: commentBody
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
          REPO_NAME: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.pull_request.number }}
          COVERAGE_REPORT_TEXT: ${{ steps.coverage-results.outputs.text_report }}
          COVERAGE_REPORT_LINE_RATE: ${{ steps.coverage-summary.outputs.line_rate }}
          MINIMUM_COVERAGE: 0.9